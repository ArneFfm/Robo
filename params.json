{"name":"Robo","tagline":"Modern task runner for PHP","body":"RoboTask\r\n====\r\n\r\nModern and simple PHP task runner inspired by Grunt and Rake aimed to automate common tasks:\r\n\r\n* executing daemons (and workers)\r\n* watching filesystem changes\r\n* performing cleanups\r\n* building releases\r\n* running multiple Symfony Commands\r\n* starting PHP server\r\n* running tests\r\n* writing cross-platform scripts\r\n\r\n\r\nBased on Symfony2 Console Component.\r\n\r\n## Installing\r\n\r\n### Composer\r\n\r\n* Add `\"codegyre/robo\": \"*\"` to `composer.json`.\r\n* Run `composer install`\r\n* Use `vendor/bin/robo` to execute robo tasks.\r\n\r\n## Usage\r\n\r\nAll tasks are defined as **public methods** in `RoboFile.php`. It can be created by running `robo init`.\r\nRoboFile has a set of predefined tasks taken from `\\Robo\\Tasks`. All tasks are included with traits.\r\nAll protected methods in traits that start with `task` prefix are tasks and can be configured and executed in your tasks.\r\n\r\nList of bundled tasks that can be executed from RoboFile\r\n\r\n* `taskExec` executes script. Optionally can be started in background.\r\n* `taskServer` starts PHP server. Optionally can be stopped on exit\r\n* `taskCopyDir` copies one dir into another\r\n* `taskCleanDir` empties specified dir\r\n* `taskDeleteDir` removes dir\r\n* `taskReplaceInFile` replaces string in a file\r\n* `taskComposerInstall` installs composer packages\r\n* `taskComposerUpdate` updates composer packages\r\n* `taskSymfonyCommand` running Symfony Command. *(requires \\Robo\\Task\\SymfonyCommand trait)*\r\n* `taskPackPhar` creating phar archive *(requires \\Robo\\Task\\PackPhar trait)*\r\n* `taskChangeLog` creating and maintaining changelog *(requires \\Robo\\Task\\Changelog trait)*\r\n* `taskWatch` monitoring dir for changes and running tests when files changes *(requires \\Robo\\Task\\Watch trait)*\r\n* `taskGitHubRelease` to create a GitHub release *(requires \\Robo\\Task\\Watch trait)*\r\n\r\nYou can write your own tasks or execute any PHP code within tasks.\r\n\r\n### Example: running Codeception Acceptance Test\r\n\r\nTo run test we need to start a server first, and launch a Selenium Server\r\n\r\n``` php\r\n<?php\r\nclass RoboFile extends \\Robo\\Tasks\r\n{\r\n\r\n    function testAcceptance($seleniumPath = '~/selenium-server-standalone-2.39.0.jar')\r\n    {\r\n       // launches PHP server on port 8000 for web dir\r\n       // server will be executed in background and stopped in the end\r\n       $this->taskServer(8000)\r\n            ->background()\r\n            ->dir('web')\r\n            ->run();\r\n\r\n       // running Selenium server in background\r\n        $this->taskExec('java -jar '.$pathToSelenium)\r\n            ->background()\r\n            ->run();\r\n\r\n        // loading Symfony Command and running with passed argument\r\n        $this->taskCommand(new \\Codeception\\Command\\Run('run'))\r\n            ->arg('suite','acceptance')\r\n            ->run();\r\n    }\r\n}\r\n?>\r\n```\r\n\r\nIf you execute `robo` you will see this task added to list of available task with name: `test:acceptance`.\r\nTo execute it you shoud run `robo test:acceptance`. You may change path to selenium server by passing new path as a argument:\r\n\r\n```\r\nrobo test:acceptance \"C:\\Downloads\\selenium.jar\"\r\n```\r\n\r\n### Example: Run Composer Update when composer.json Changes\r\n\r\nActually this task is useless, but it demonstrates you of using `watch` task so you can use it for running tests or building assets.\r\n\r\n``` php\r\n<?php\r\nclass RoboFile extends \\Robo\\Tasks {\r\n    use \\Robo\\Task\\Watch;\r\n\r\n    function watchComposer()\r\n    {\r\n        // when composer.json changes `composer update` will be executed\r\n        $this->taskWatch()->monitor('composer.json', function() {\r\n            $this->taskComposerUpdate()->run();\r\n        })->run();\r\n    }\r\n}\r\n?>\r\n```\r\n\r\n\r\n### Example: Cleaning Logs and Cache\r\n\r\n``` php\r\n<?php\r\nclass RoboFile extends \\Robo\\Tasks\r\n{\r\n    public function clean()\r\n    {\r\n        $this->taskCleanDir([\r\n            'app/cache'\r\n            'app/logs'\r\n        ])->run();\r\n\r\n        $this->taskDeleteDir([\r\n            'web/assets/tmp_uploads',\r\n        ])->run();\r\n    }\r\n\r\n?>\r\n```\r\n\r\nThis task cleans `app/cache` and `app/logs` dirs (ignoreing .gitignore and .gitkeep files)\r\nCan be executed by running:\r\n\r\n```\r\nrobo clean\r\n```\r\n\r\n### Example: Creating Phar Archive\r\n\r\nThis example was extracted from Codeception and simplified:\r\n\r\n``` php\r\nfunction buildPhar()\r\n{\r\n    $pharTask = $this->taskPackPhar('package/codecept.phar')\r\n        ->compress()\r\n        ->stub('package/stub.php');\r\n\r\n    $finder = Finder::create()\r\n        ->ignoreVCS(true)\r\n        ->name('*.php')\r\n        ->in('src');\r\n\r\n    foreach ($finder as $file) {\r\n        $pharTask->addFile('src/'.$file->getRelativePathname(), $file->getRealPath());\r\n    }\r\n\r\n    $finder = Finder::create()->files()\r\n        ->ignoreVCS(true)\r\n        ->name('*.php')\r\n        ->exclude('Tests')\r\n        ->exclude('tests')\r\n        ->in('vendor');\r\n\r\n    foreach ($finder as $file) {\r\n        $pharTask->addStripped('vendor/'.$file->getRelativePathname(), $file->getRealPath());\r\n    }\r\n\r\n    $pharTask->addFile('autoload.php', 'autoload.php')\r\n        ->addFile('codecept', 'package/bin')\r\n        ->run();\r\n\r\n    $code = $this->taskExec('php package/codecept.phar')->run();\r\n    if ($code !== 0) {\r\n        throw new Exception(\"There was problem compiling phar\");\r\n    }\r\n}\r\n```\r\n\r\n[This and other example tasks](https://github.com/Codeception/Codeception/blob/2.0-dev/RoboFile.php). can be found in Codeception repo\r\n\r\n### Example: Publishing New Release of Robo\r\n\r\n``` php\r\n<?php\r\nclass Robofile extends \\Robo\\Tasks\r\n{\r\n    public function release()\r\n    {\r\n        // print new message\r\n        $this->say(\"Releasing Robo\");\r\n\r\n        // ask for changes in this release\r\n        $changelog = $this->taskChangelog()\r\n            ->version(\\Robo\\Runner::VERSION)\r\n            ->askForChanges();\r\n        $changelog->run();\r\n\r\n        // adding changelog and pushing it\r\n        $this->taskExec('git add CHANGELOG.md')->run();\r\n        $this->taskExec('git commit -m \"updated changelog\"')->run();\r\n        $this->taskExec('git push')->run();\r\n\r\n        // create GitHub release\r\n        $this->taskGitHubRelease(\\Robo\\Runner::VERSION)\r\n            ->uri('Codegyre/Robo')\r\n            ->askDescription()\r\n            ->changes($changelog->getChanges())\r\n            ->run();\r\n    }\r\n}\r\n```\r\n\r\nTo create new release we run:\r\n\r\n```\r\n✗ ./robo release\r\n➜  Releasing Robo\r\n?  Changed in this release:Mered Tasks and Traits to same file\r\n?  Changed in this release:Added Watcher task\r\n?  Changed in this release:Added GitHubRelease task\r\n?  Changed in this release:Added Changelog task\r\n?  Changed in this release:Added ReplaceInFile task\r\n?  Changed in this release:\r\n [Robo\\Task\\ChangelogTask] Creating CHANGELOG.md\r\n [Robo\\Task\\ReplaceInFileTask] CHANGELOG.md updated\r\n [Robo\\Task\\ExecTask] running git add CHANGELOG.md\r\n [Robo\\Task\\ExecTask] running git commit -m \"updated changelog\"\r\n [Robo\\Task\\GitHubReleaseTask] {\"url\":\"https://api.github.com/repo...\r\n```\r\n\r\n## API\r\n\r\nTasks are classes that implement `Robo\\TaskInterface` with method `run` defined. Each other method of task should be used for specifing task options and returns `$this` for fluent interface:\r\n\r\nTasks are including into RoboFile with traits. Traits should contain protected methods with `task` prefix that return new instance of a task.\r\n\r\nSee: [Bundled Tasks](https://github.com/Codegyre/Robo/tree/master/src/Task)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}